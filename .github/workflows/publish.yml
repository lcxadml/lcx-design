name: Publish Icon Packages or Components Packages
on:
  push:
    tags:
      - "*"
jobs:
  run-gulp:
    runs-on: ubuntu-latest

    steps:
      #检查代码仓库
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.com/

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Update npm
        run: npm install npm@9 -g

      - name: Install dependencies
        run: pnpm i --no-frozen-lockfile

      - name: Get Version
        run: echo "TAG_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Authenticate to npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" >> ./.npmrc

      - name: Update Icon Version
        if: startsWith(github.ref, 'refs/tags/icon')
        run: sh ./scripts/publish-icon.sh
        env:
          TAG_VERSION: ${{env.TAG_VERSION}}
          NODE_AUTH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}
          REGISTRY: https://registry.npmjs.com/

      - name: Update Icon Version
        if: startsWith(github.ref, 'refs/tags/comp')
        run: sh ./scripts/publish.sh
        env:
          TAG_VERSION: ${{env.TAG_VERSION}}
          NODE_AUTH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}
          REGISTRY: https://registry.npmjs.com/

      - name: Configure git
        run: |
          git config user.name "licunxing"
          git config user.email "864255598@qq.com"

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TARGET_VERSION=${{ secrets.TAG_VERSION }}
          if [[ "$TARGET_VERSION" == "icon" ]]; then
            echo "Adding ./packages/lcx-design-icon/package.json"
            git add ./packages/lcx-design-icon/package.json
          else
            echo "Adding ./packages/lcx-design/package.json"
            git add ./packages/lcx-design/package.json
          git commit -m "UpdateVersion"
          git push origin HEAD:main
